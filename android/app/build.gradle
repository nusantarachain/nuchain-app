def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keyProps = new Properties()
def keyPropsFile = rootProject.file('key.properties')
// if (keyPropsFile.exists()) {
    keyPropsFile.withReader('UTF-8') { reader ->
        keyProps.load(reader)
    }
// }

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "network.nuchain.app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // ndk {
        //     abiFilters 'armeabi-v7a'
        // }
    }

    signingConfigs {
        release {
            // storeFile rootProject.file("app/io.nuchain.nuchain.jks")
            // storePassword System.getenv("APPCENTER_KEYSTORE_PASSWORD")
            // keyAlias System.getenv("APPCENTER_KEY_ALIAS")
            // keyPassword System.getenv("APPCENTER_KEY_PASSWORD")

           keyAlias keyProps['keyAlias']
           keyPassword keyProps['keyPassword']
           storeFile keyProps['storeFile'] ? file(keyProps['storeFile']) : null
           storePassword keyProps['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig signingConfigs.debug

            ndk {
                abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
            }
        }
    }

    // add a product flavor for fdroid release
    flavorDimensions "deploy"
    productFlavors {
        prod {
            getIsDefault().set(true)
        }
        fdroid {
            dimension "deploy"
            signingConfig null
        }
    }
    android.applicationVariants.all { variant ->
        if (variant.flavorName == "fdroid") {
            variant.outputs.all { output ->
                output.outputFileName = "app-fdroid-release.apk"
            }
        }
    }

    splits {
        abi {
            enable false
            reset()
            include 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
            universalApk true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.1.0"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
